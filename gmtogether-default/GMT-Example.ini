; This is an example file showing the various supported tweaks and options.
; To make use of it, copy it to the game's directory, rename from `GMT-Example` to `GMT`,
; and uncomment/edit keys of interest.

[GMLAPI]
; if you always see "Oh that's bad, we couldn't find the functions in a normal way.",
; this skips that step and goes straight to scanning memory (saves a bit of time)
;sigSearch=false

[I/O]
; Overrides save directory, only needed if GMT can't auto-detect it.
;saveDir=C:\Users\You\AppData\Local\GameName

; Disables file sync, cutting bandwidth consumption but requiring you to do that manually.
;fileSync=off

; Disables file sync and prevents saveDir file changes for both players.
;fileSync=virtual

; Overrides network timeout - how long the game may spend waiting for response
; before assuming that the remote player is gone for good.
;timeout=60

[menu]
; Uses the specified game font for the menu screen.
;fontName=fnt_some

; Prints names of all game fonts into GMT#.log on startup, for figuring out the names for above.
;fontName=?

[trackSync]
; Disables RNG tracking. Probably don't touch this unless it has no effect on gameplay
;RNG=false

; Disables instance count tracking. Similarly, a last measure
;instance_number=false

; Disables tracking for specific object types, in case they have no effect on gameplay
; but do get out of sync (e.g. do hardware-specific checks)
;instance_number=~obj_one,obj_two

[tweaks]
; Enables mouselock (akin to https://yellowafterlife.itch.io/gamemaker-native-mouselock)
; Mouselock will auto-disable when the game loses focus or while you hold Alt.
; If the game already uses my mouselock DLL, rename the DLL to be something else / not load.
;display_mouse_lock=true

; Overrides game cursor
; For supported values, see
; http://docs2.yoyogames.com/source/_build/3_scripting/4_gml_reference/cameras%20and%20display/display/the%20game%20window/window_set_cursor.html
;window_set_cursor=cr_default

; Overrides game cursor to a custom cursor file
; Note: this only works in-game - GMT menu will still display the default cursor.
;window_set_cursor=mycursor.cur

; Can be set to a keyboard button to do a screenshot+dump of game state.
; This is only useful for figuring out variable/object names for scripting.
;dumpKey=tilde

; Overrides window size, usually used with windowed mode.
; This may not work as expected, depending on game.
;window_set_size=1280,720

; Overrides reported display size
; Similarly can be used in combination with windowed mode to force equal game dimensions
;display_get_size=1280,720

; Disables time-related sync.
; You shouldn't have to touch this anymore, as GMT can now detect busy-sleep
;sync_time=false

; Since sending over typed input is a little more bandwidth,
; GMT will not poll/send typed characters until keyboard_string is used,
; and will continue taking keyboard input for the following number of frames.
;keyboard_string_timeout=30

; Forces RNG to be the same at the beginning of each frame.
; You can try this if the game's RNG tends to desync but rest of the game works fine.
;forceRNG=true

; Synchronizes the reported active user ID between game instances.
; This may be needed for select games that tie save data to user ID
; and may have unpredictable effects on the rest.
;steam_get_user_steam_id=true

; Allows steam workshop API to function (without ensuring synchronization)
; Some games might use Workshop API as data storage without public access.
;steam_ugc=true

[window_move]
; Allows to move the window around by holding the specified key and pressing arrow keys
; It's a little clunky but better than nothing if a game runs borderless.
;key=LeftAlt

; Changes the amount of pixels the window moves per press
;step=40

; If enabled, moves not just the window, but also the virtual screen bounds.
; This is good for games that aggressively reposition the window.
;sync=true

[gamepadSim]
; Changes the Lua script name
;path=GMT-Gamepad.lua

; Custom key for reloading the script
;reloadKey=F1

[playback]
; These are hotkeys for replays/TAS

; Toggles pause
;pauseToggle=Pause

; Performs single-frame steps during pause
;step=LShift

; Pauses the game while the key is held down
;pauseHold=LCtrl

; Changes playback speed.
; You can add as many of these as you want
;timeScale:0.5=d1

; Fast-forwards through a given number of frames (uncapping framerate to do so)
;skipFrames:30=d2

; Lets you start playing from mid-replay (not done yet)
;dropin=F9


[external_call]
; This section allows you to blank out DLL calls by DLL name + function name patterns.
; So, if you know that a specific function in a specific DLL causes desyncs,
; you can override it to not be called as such.
; Format is `dll_path:function_name=return_value`
; return_value can currently be `0`, `1`, or `s0` (an empty string).
;some.dll:some_func=0
;some.dll:other_func=s0

[debug]
; By default we'll log file notes on access to debug log, but you can disable this
;i/o=false

; Logs information about polled inputs
;polled=false

; Logs per-frame information about inputs being applied
;deltas=true

; Logs majority of game-side calls to random number generator functions.
; Mostly only good if you want to ask the developer about what's going on.
;rng=true